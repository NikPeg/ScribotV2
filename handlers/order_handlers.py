from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from utils.admin_logger import send_admin_log
import html
from core import OrderStates
from aiogram import Bot
from keyboards import get_pages_keyboard, get_work_type_keyboard, get_model_keyboard, get_back_to_menu_keyboard
import asyncio
import html
from aiogram import Bot, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from core import OrderStates
from db.database import create_order, update_order_thread_id
from gpt.assistant import create_thread, ask_assistant
from core.work_generator import generate_work_async
from utils.admin_logger import send_admin_log

order_router = Router()

@order_router.message(StateFilter(None), F.text)
async def handle_direct_theme(message: Message, state: FSMContext):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏ –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (StateFilter(None)).
    –û–Ω –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã.
    """
    await state.update_data(theme=message.text)
    await message.answer(
        text="–¢–µ–º—É –ø—Ä–∏–Ω—è–ª. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π <b>–æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã</b>:",
        reply_markup=get_pages_keyboard()
    )
    await state.set_state(OrderStates.GET_PAGES)
    log_text = f"–í–≤–µ–ª —Ç–µ–º—É –Ω–∞–ø—Ä—è–º—É—é: ¬´{html.escape(message.text[:100])}¬ª"
    await send_admin_log(message.bot, message.from_user, log_text)


@order_router.message(StateFilter(OrderStates.GET_THEME))
async def handle_theme(message: Message, state: FSMContext):
    await state.update_data(theme=message.text)
    await message.answer(
        text="–¢–µ–º—É –ø—Ä–∏–Ω—è–ª. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π <b>–æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã</b>:",
        reply_markup=get_pages_keyboard()
    )
    await state.set_state(OrderStates.GET_PAGES)
    await send_admin_log(message.bot, message.from_user, "–í—ã–±—Ä–∞–ª —Ç–µ–º—É (1)")


@order_router.callback_query(StateFilter(OrderStates.GET_PAGES), F.data.startswith("pages:"))
async def handle_pages(callback: CallbackQuery, state: FSMContext):
    pages = callback.data.split(":")[1]
    await state.update_data(pages=pages)
    await callback.message.edit_text(
        text="–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ <b>—Ç–∏–ø —Ä–∞–±–æ—Ç—ã</b>:",
        reply_markup=get_work_type_keyboard()
    )
    await state.set_state(OrderStates.GET_TYPE)
    await callback.answer()
    await send_admin_log(callback.bot, callback.from_user, "–í—ã–±—Ä–∞–ª —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü (2)")


@order_router.callback_query(StateFilter(OrderStates.GET_TYPE), F.data == "back_to_pages")
async def back_to_pages(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_pages_keyboard()
    )
    await state.set_state(OrderStates.GET_PAGES)
    await callback.answer()
    await send_admin_log(callback.bot, callback.from_user, "–í—ã–±—Ä–∞–ª –æ–±—ä–µ–º (3)")


@order_router.callback_query(StateFilter(OrderStates.GET_TYPE), F.data.startswith("type:"))
async def handle_work_type(callback: CallbackQuery, state: FSMContext):
    work_type = callback.data.split(":")[1]
    await state.update_data(work_type=work_type)
    await callback.message.edit_text(
        text="–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ <b>–º–æ–¥–µ–ª—å</b> –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=get_model_keyboard()
    )
    await state.set_state(OrderStates.GET_MODEL)
    await callback.answer()
    await send_admin_log(callback.bot, callback.from_user, "–í—ã–±—Ä–∞–ª —Ç–∏–ø (3)")


@order_router.callback_query(StateFilter(OrderStates.GET_MODEL), F.data == "back_to_type")
async def back_to_type(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–£–∫–∞–∂–∏—Ç–µ <b>—Ç–∏–ø —Ä–∞–±–æ—Ç—ã</b>:",
        reply_markup=get_work_type_keyboard()
    )
    await state.set_state(OrderStates.GET_TYPE)
    await callback.answer()
    await send_admin_log(callback.bot, callback.from_user, "–í—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å (5)")

@order_router.callback_query(StateFilter(OrderStates.GET_MODEL), F.data.startswith("model:"))
async def handle_model(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –ë–î, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é
    –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥.
    """
    model = callback.data.split(":")[1]
    await state.update_data(model=model)
    user_data = await state.get_data()

    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π f-—Å—Ç—Ä–æ–∫–∏
    summary_text = (
        f"<b>–¢–µ–º–∞:</b> {user_data.get('theme')}\n"
        f"<b>–û–±—ä–µ–º:</b> ~{user_data.get('pages')} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        f"<b>–¢–∏–ø:</b> {user_data.get('work_type')}\n"
        f"<b>–ú–æ–¥–µ–ª—å:</b> {user_data.get('model')}\n"
    )

    await state.clear()
    await callback.message.edit_text(text=summary_text)

    # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_message = await callback.message.answer(
        text="‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è... –ì–æ—Ç–æ–≤–ª—é—Å—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
    )

    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    order_id = await create_order(
        user_id=callback.from_user.id,
        theme=user_data.get('theme'),
        pages=int(user_data.get('pages')),
        work_type=user_data.get('work_type'),
        gpt_model=user_data.get('model')
    )

    # 2. –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ OpenAI
    thread_id = await create_thread()
    await update_order_thread_id(order_id, thread_id)

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ç–µ–º–æ–π —Ä–∞–±–æ—Ç—ã –≤ –ø–æ—Ç–æ–∫
    await ask_assistant(thread_id, f"–¢–µ–º–∞ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã: ¬´{user_data.get('theme')}¬ª. –ó–∞–ø–æ–º–Ω–∏ –µ—ë.", model)

    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
    asyncio.create_task(
        generate_work_async(
            order_id=order_id,
            thread_id=thread_id,
            model_name=model,
            bot=bot, # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç `bot`
            chat_id=callback.from_user.id,
            message_id_to_edit=progress_message.message_id
        )
    )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    log_details = (
        f"üöÄ <b>–ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n"
        f"  <b>–¢–µ–º–∞:</b> {html.escape(str(user_data.get('theme')))}\n"
        f"  <b>–û–±—ä–µ–º:</b> ~{user_data.get('pages')} —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        f"  <b>–¢–∏–ø:</b> {user_data.get('work_type')}\n"
        f"  <b>–ú–æ–¥–µ–ª—å:</b> {html.escape(str(model))}"
    )
    await send_admin_log(bot, callback.from_user, log_details)

@order_router.message(StateFilter(OrderStates.GET_PAGES, OrderStates.GET_TYPE, OrderStates.GET_MODEL))
async def handle_wrong_input_in_fsm(message: Message):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏, –∞ –Ω–µ –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç."
    )
    await send_admin_log(message.bot, message.from_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {message.text}")
