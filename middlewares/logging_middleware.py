from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery

from core import settings

class AdminLoggingMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = data.get('event_from_user')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–ª–∏ —ç—Ç–æ —Å–∞–º –∞–¥–º–∏–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if not user or user.id == settings.admin_id:
            return await handler(event, data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
        log_message = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} "
        if user.username:
            log_message += f"(@{user.username}) "
        log_message += f"[{user.id}]\n"

        if isinstance(event, Message):
            log_message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {event.text or '[–Ω–µ —Ç–µ–∫—Å—Ç]'}"
        elif isinstance(event, CallbackQuery):
            log_message += f"‚ö´Ô∏è –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏: `{event.data}`"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –∞–¥–º–∏–Ω—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ
        try:
            await data['bot'].send_message(
                chat_id=settings.admin_id,
                text=log_message,
                parse_mode="Markdown" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è `–∫–æ–¥–∞`
            )
        except Exception:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ,
            # –º—ã –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
            pass

        return await handler(event, data)
